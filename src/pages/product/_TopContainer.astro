---
/**
 * 一番上に表示するコンポーネント。
 * PC版ではキャラ名・キャライラスト・キャラメニューがファーストビューに表示される。
 * モバイル版ではキャライラスト・キャラメニューがファーストビューに表示される。
 */

import FontAwesomeIcon from "@/components/FontAwesomeIcon.astro";
import KeepScrollAnchor from "@/components/KeepScrollAnchor.astro";
import type { CharacterKey } from "@/constants/characterEntry";
import { characterKeys } from "@/constants/characterEntry";
import { characterInfos } from "@/constants/characterInfo";
import {
  getDormitoryCharacterPageUrl,
  getProductPageUrl,
} from "@/constants/url";
import { withBaseUrl } from "@/helper";
import {
  showDownloadModalAttr,
  showLibraryTermIntroModalCharacterKeyAttr,
} from "@/store";
import {
  faCircleLeft,
  faCircleRight,
  faDownload,
} from "@fortawesome/free-solid-svg-icons";
import { Image } from "astro:assets";
import AudioSample from "./AudioSample";
import { buildDescription } from "./constants";

interface Props {
  characterKey: CharacterKey;
}

const { characterKey } = Astro.props;
const characterInfo = characterInfos[characterKey];

const description = buildDescription(characterInfo);
const additionalDescription = characterInfo.additionalProductDescription;
const characterBackgroundColor = characterInfo.lightColor;

const prevCharacterKey =
  characterKeys[
    (characterKeys.indexOf(characterKey) + characterKeys.length - 1) %
      characterKeys.length
  ];
const postCharacterKey =
  characterKeys[
    (characterKeys.indexOf(characterKey) + 1) % characterKeys.length
  ];
---

<div class="top container">
  <a
    href={withBaseUrl(getProductPageUrl(characterInfos[prevCharacterKey]))}
    class="button prev circle-icon is-black"
    aria-label="前のキャラクターを表示"
  >
    <FontAwesomeIcon icon={faCircleLeft} />
  </a>
  <a
    href={withBaseUrl(getProductPageUrl(characterInfos[postCharacterKey]))}
    class="button post circle-icon is-black"
    aria-label="次のキャラクターを表示"
  >
    <FontAwesomeIcon icon={faCircleRight} />
  </a>

  <div class="character-area">
    <div class="height-image-wrapper">
      <div>
        <Image
          src={characterInfo.portraitImage}
          alt={characterInfo.name}
          height={1280}
          densities={[1, 1.5, 2]}
          style={{ display: "block", objectFit: "contain" }}
        />
      </div>
    </div>
    <div class="info pb-5">
      <div class="detail p-4">
        <p>{characterInfo.description.replaceAll("<br />", "")}</p>
        <a
          href={withBaseUrl(getDormitoryCharacterPageUrl(characterInfo))}
          class="has-text-weight-bold has-text-black">キャラクター詳細 →</a
        >
      </div>

      <AudioSample client:visible characterInfo={characterInfo} />
    </div>
  </div>

  <div class="description-area">
    <h1 class="title">VOICEVOX {characterInfo.name}</h1>
    <p class="is-size-5">
      {description}
      {additionalDescription && additionalDescription}
    </p>
    {
      characterInfo.releaseDate == undefined && (
        <button
          {...{ [showDownloadModalAttr]: "" }}
          class="button mt-5 is-primary is-rounded is-large"
        >
          <span class="icon">
            <FontAwesomeIcon icon={faDownload} />
          </span>
          <span class="has-text-weight-semibold">
            <span class="is-hidden-mobile">VOICEVOX を </span>
            ダウンロード
          </span>
        </button>
      )
    }
    <div class="terms mt-5">
      <a href={withBaseUrl("/term/")} class="button is-normal is-rounded">
        <span>VOICEVOX 利用規約</span>
      </a>
      {
        characterInfo.policyUrl && (
          <button
            {...{
              [showLibraryTermIntroModalCharacterKeyAttr]: characterKey,
            }}
            class="button is-normal is-rounded"
            type="button"
          >
            <span>{characterInfo.name} 利用規約</span>
          </button>
        )
      }
      {
        characterInfo.additionalProductLinks &&
          characterInfo.additionalProductLinks.map((obj) => (
            <a
              href={obj.url}
              class="button is-normal is-rounded"
              target="_blank"
              rel="noreferrer"
            >
              <span>{obj.label}</span>
            </a>
          ))
      }
    </div>
  </div>

  <div class="charamenu-area">
    <div class="characters" aria-label="キャラクター一覧">
      {
        characterKeys.map((key) => (
          <KeepScrollAnchor
            href={withBaseUrl(getProductPageUrl(characterInfos[key]))}
            class={`character ${key === characterKey ? "active" : ""}`}
            aria-label={characterInfos[key].name}
            style={{
              "--characterLightColor": characterInfos[key].lightColor,
              "--characterColor": characterInfos[key].color,
            }}
          >
            <Image
              src={characterInfos[key].bustupImage}
              alt={characterInfos[key].name}
              width="64"
              densities={[1, 1.5, 2]}
            />
          </KeepScrollAnchor>
        ))
      }
    </div>
  </div>
</div>

<script>
  function scrollToCenter() {
    const characterList = document.querySelector(
      "[aria-label='キャラクター一覧']",
    );
    if (characterList == undefined) return;

    if (!(characterList instanceof HTMLElement))
      throw new Error(`characterList is not HTMLElement: ${characterList}`);

    const active = characterList.querySelector(".active");
    if (!(active instanceof HTMLElement))
      throw new Error(`active is not HTMLElement: ${active}`);

    const activeCenter = active.offsetLeft + active.offsetWidth / 2;
    const containerCenter = characterList.offsetWidth / 2;
    characterList.scrollLeft = activeCenter - containerCenter;
  }
  document.addEventListener("astro:after-swap", scrollToCenter);

  scrollToCenter();
</script>

<style lang="scss" define:vars={{ characterBackgroundColor }} is:global>
  @use "@/styles/vars.scss" as *;
  @use "@/styles/helper.scss" as *;

  @use "bulma/sass/elements" as *;
  @use "bulma/sass/utilities/initial-variables" as *;
  @use "bulma/sass/utilities/mixins" as *;
  @use "bulma/sass/helpers" as *;

  .top {
    display: grid;
    grid-template-areas:
      "description character"
      "charamenu charamenu";
    grid-template-columns: 1fr 1fr;
    grid-template-rows: calc(100vh - 3.25rem - 5rem) 5rem;
    min-height: calc($desktop / 2);
    max-height: $desktop;

    position: relative;

    @include mobile {
      grid-template-areas:
        "character"
        "charamenu"
        "description";
      grid-template-columns: 100%;
      grid-template-rows: calc(100vh - 3.25rem - 5rem) 5rem auto;
      max-height: unset;
    }

    .prev,
    .post {
      position: absolute;
      z-index: 10; // FIXME: なくしたい
      top: 10%;
      transform: translateY(-50%);
      font-size: 3rem;
      opacity: 0.25;
    }
    .prev {
      left: calc(50% - 50vw + 1.2rem);
    }
    .post {
      right: calc(50% - 50vw + 1.2rem);
    }

    /* キャラクターエリア */
    .character-area {
      grid-area: character;
      position: relative;

      &::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 50vw;
        height: 100%;
        background-color: var(--characterBackgroundColor);

        @include mobile {
          width: 100%; // FIXME: 左右に空間が空いてしまう
        }
      }

      .info {
        position: absolute;
        top: 0;
        right: 5%;

        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: flex-end;
        gap: 1rem;

        .detail,
        .sample {
          background-color: #fffc;
          width: 200px;
          border-radius: 16px;
          display: flex;
          flex-direction: column;
        }

        .detail {
          align-items: flex-end;
          gap: 1rem;
        }

        .sample {
          align-items: center;
        }
      }
    }

    /* 説明エリア */
    .description-area {
      grid-area: description;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: start;
      @extend .px-6;

      @include mobile {
        padding-left: 0 !important;
        padding-right: 0 !important;
        align-items: center;
        padding-top: 3rem;
      }

      .terms {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;

        @include mobile {
          flex-direction: column;
          align-items: center;
        }
      }
    }

    /* キャラクターメニューエリア */
    .charamenu-area {
      grid-area: charamenu;

      .characters {
        display: flex;
        overflow: auto hidden;
        margin: 0 auto auto;
        height: 100%;
        scrollbar-width: none;

        &:hover {
          scrollbar-width: thin;
        }

        .character {
          --padding-y: 1.25rem;
          display: flex;
          opacity: 0.5;
          height: calc(5rem - var(--padding-y) * 2);
          box-sizing: content-box;
          aspect-ratio: 1;
          padding: var(--padding-y) 0.5rem;

          &:hover {
            opacity: 0.8;
          }

          &.active {
            --padding-y: 1rem;
            opacity: 1;
            position: relative;

            &:before {
              content: "";
              position: absolute;
              top: 0;
              left: 0;
              height: 0.25rem;
              width: 100%;
              background-color: var(--characterColor);
            }
          }

          img {
            background-color: var(--characterLightColor);
            height: 100%;
            width: auto;
            border-radius: 0.45rem;
            margin: auto;
          }
        }
      }
    }
  }
</style>
